/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { RelayerTypes, IRelayer, IClient } from "@walletconnect/types";
import { IJsonRpcProvider, JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
export declare class Relayer extends IRelayer {
    client: IClient;
    logger: Logger;
    events: EventEmitter;
    provider: IJsonRpcProvider;
    context: string;
    constructor(client: IClient, logger: Logger, provider?: string | IJsonRpcProvider);
    get connected(): boolean;
    init(): Promise<void>;
    publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    subscribe(topic: string, listener: (payload: JsonRpcPayload) => void, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    unsubscribe(topic: string, id: string, opts?: RelayerTypes.SubscribeOptions): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private onPayload;
    private setProvider;
    private registerEventListeners;
}
//# sourceMappingURL=relayer.d.ts.map