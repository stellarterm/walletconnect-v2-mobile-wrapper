/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, IJsonRpcHistory, JsonRpcRecord, RequestEvent } from "@walletconnect/types";
import { JsonRpcRequest, JsonRpcResponse } from "@walletconnect/jsonrpc-utils";
export declare class JsonRpcHistory extends IJsonRpcHistory {
    client: IClient;
    logger: Logger;
    records: Map<number, JsonRpcRecord>;
    events: EventEmitter;
    context: string;
    private cached;
    constructor(client: IClient, logger: Logger);
    init(): Promise<void>;
    get size(): number;
    get keys(): number[];
    get values(): JsonRpcRecord[];
    get pending(): RequestEvent[];
    set(topic: string, request: JsonRpcRequest, chainId?: string): Promise<void>;
    update(topic: string, response: JsonRpcResponse): Promise<void>;
    get(topic: string, id: number): Promise<JsonRpcRecord>;
    delete(topic: string, id?: number): Promise<void>;
    exists(topic: string, id: number): Promise<boolean>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private getNestedContext;
    private getHistoryContext;
    private getStorageKey;
    private getRecord;
    private persist;
    private restore;
    private reset;
    private isEnabled;
    private enable;
    private disable;
    private registerEventListeners;
}
//# sourceMappingURL=history.d.ts.map