/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, ISubscription, Reason, SubscriptionEvent, SubscriptionOptions, SubscriptionParams } from "@walletconnect/types";
export declare class Subscription<Data = any> extends ISubscription<Data> {
    client: IClient;
    logger: Logger;
    context: string;
    subscriptions: Map<string, SubscriptionParams<Data>>;
    events: EventEmitter;
    private timeout;
    private cached;
    constructor(client: IClient, logger: Logger, context: string);
    init(): Promise<void>;
    get length(): number;
    get topics(): string[];
    get values(): SubscriptionParams<Data>[];
    set(topic: string, data: Data, opts: SubscriptionOptions): Promise<void>;
    get(topic: string): Promise<Data>;
    update(topic: string, update: Partial<Data>): Promise<void>;
    delete(topic: string, reason: Reason): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    protected onPayload(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    private getNestedContext;
    private getSubscriptionContext;
    private getStorageKey;
    private getSubscription;
    private subscribeAndSet;
    private setTimeout;
    private deleteTimeout;
    private resetTimeout;
    private onTimeout;
    private checkSubscriptions;
    private persist;
    private restore;
    private reset;
    private isEnabled;
    private enable;
    private disable;
    private registerEventListeners;
}
//# sourceMappingURL=subscription.d.ts.map