"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const types_1 = require("@walletconnect/types");
const utils_1 = require("@walletconnect/utils");
const constants_1 = require("../constants");
const logger_1 = require("@walletconnect/logger");
class Subscription extends types_1.ISubscription {
    constructor(client, logger, context) {
        super(client, logger, context);
        this.client = client;
        this.logger = logger;
        this.context = context;
        this.subscriptions = new Map();
        this.events = new events_1.EventEmitter();
        this.timeout = new Map();
        this.cached = [];
        this.logger = logger_1.generateChildLogger(logger, this.context);
        this.registerEventListeners();
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.trace(`Initialized`);
            yield this.restore();
        });
    }
    get length() {
        return this.subscriptions.size;
    }
    get topics() {
        return Array.from(this.subscriptions.keys());
    }
    get values() {
        return Array.from(this.subscriptions.values());
    }
    set(topic, data, opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            if (this.subscriptions.has(topic)) {
                this.update(topic, data);
            }
            else {
                this.logger.debug(`Setting subscription`);
                this.logger.trace({ type: "method", method: "set", topic, data, opts });
                yield this.subscribeAndSet(topic, data, opts);
                this.events.emit(constants_1.SUBSCRIPTION_EVENTS.created, {
                    topic,
                    data,
                });
            }
        });
    }
    get(topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            this.logger.debug(`Getting subscription`);
            this.logger.trace({ type: "method", method: "get", topic });
            const subscription = yield this.getSubscription(topic);
            return subscription.data;
        });
    }
    update(topic, update) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            this.logger.debug(`Updating subscription`);
            this.logger.trace({ type: "method", method: "update", topic, update });
            const subscription = yield this.getSubscription(topic);
            const data = Object.assign(Object.assign({}, subscription.data), update);
            this.subscriptions.set(topic, Object.assign(Object.assign({}, subscription), { topic,
                data }));
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.updated, {
                topic,
                data,
                update,
            });
        });
    }
    delete(topic, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            this.logger.debug(`Deleting subscription`);
            this.logger.trace({ type: "method", method: "delete", topic, reason });
            const subscription = yield this.getSubscription(topic);
            this.subscriptions.delete(topic);
            yield this.client.relayer.unsubscribe(subscription.topic, subscription.id, {
                relay: subscription.relay,
            });
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.deleted, {
                topic,
                data: subscription.data,
                reason,
            });
        });
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    onPayload(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.payload, payloadEvent);
        });
    }
    getNestedContext(length) {
        const nestedContext = logger_1.getLoggerContext(this.logger).split("/");
        return nestedContext.slice(nestedContext.length - length, nestedContext.length);
    }
    getSubscriptionContext() {
        return this.getNestedContext(2).join(" ");
    }
    getStorageKey() {
        const storageKeyPrefix = `${this.client.protocol}@${this.client.version}:${this.client.context}`;
        const subscriptionContext = this.getNestedContext(2).join(":");
        return `${storageKeyPrefix}//${subscriptionContext}`;
    }
    getSubscription(topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            const subscription = this.subscriptions.get(topic);
            if (!subscription) {
                const error = utils_1.ERROR.NO_MATCHING_TOPIC.format({
                    context: this.getSubscriptionContext(),
                    topic,
                });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            return subscription;
        });
    }
    subscribeAndSet(topic, data, opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = yield this.client.relayer.subscribe(topic, (payload) => this.onPayload({ topic, payload }), opts);
            const expiry = opts.expiry || Date.now() + constants_1.SUBSCRIPTION_DEFAULT_TTL * 1000;
            this.subscriptions.set(topic, Object.assign(Object.assign({ id, topic, data }, opts), { expiry }));
            this.setTimeout(topic, expiry);
        });
    }
    setTimeout(topic, expiry) {
        if (this.timeout.has(topic))
            return;
        const ttl = expiry - Date.now();
        if (ttl <= 0) {
            this.onTimeout(topic);
            return;
        }
        if (ttl > constants_1.CLIENT_BEAT_INTERVAL)
            return;
        const timeout = setTimeout(() => this.onTimeout(topic), ttl);
        this.timeout.set(topic, timeout);
    }
    deleteTimeout(topic) {
        if (!this.timeout.has(topic))
            return;
        const timeout = this.timeout.get(topic);
        if (typeof timeout === "undefined")
            return;
        clearTimeout(timeout);
    }
    resetTimeout() {
        this.timeout.forEach(timeout => clearTimeout(timeout));
        this.timeout.clear();
    }
    onTimeout(topic) {
        this.deleteTimeout(topic);
        this.delete(topic, utils_1.ERROR.EXPIRED.format({ context: this.getSubscriptionContext() }));
    }
    checkSubscriptions() {
        this.subscriptions.forEach(subscription => this.setTimeout(subscription.topic, subscription.expiry));
    }
    persist() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.client.storage.setItem(this.getStorageKey(), this.values);
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.sync);
        });
    }
    restore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const persisted = yield this.client.storage.getItem(this.getStorageKey());
                if (typeof persisted === "undefined")
                    return;
                if (!persisted.length)
                    return;
                if (this.subscriptions.size) {
                    const error = utils_1.ERROR.RESTORE_WILL_OVERRIDE.format({
                        context: this.getSubscriptionContext(),
                    });
                    this.logger.error(error.message);
                    throw new Error(error.message);
                }
                this.cached = persisted;
                yield Promise.all(this.cached.map((subscription) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    const { topic, data } = subscription;
                    const opts = {
                        relay: subscription.relay,
                        expiry: subscription.expiry,
                    };
                    yield this.subscribeAndSet(topic, data, opts);
                })));
                yield this.enable();
                this.logger.debug(`Successfully Restored subscriptions for ${this.getSubscriptionContext()}`);
                this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
            }
            catch (e) {
                this.logger.debug(`Failed to Restore subscriptions for ${this.getSubscriptionContext()}`);
                this.logger.error(e);
            }
        });
    }
    reset() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.disable();
            yield Promise.all(this.cached.map((subscription) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { topic, data } = subscription;
                const opts = {
                    relay: subscription.relay,
                    expiry: subscription.expiry,
                };
                yield this.subscribeAndSet(topic, data, opts);
            })));
            yield this.enable();
        });
    }
    isEnabled() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cached.length)
                return;
            return new Promise(resolve => {
                this.events.once(constants_1.SUBSCRIPTION_EVENTS.enabled, () => resolve());
            });
        });
    }
    enable() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.cached = [];
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.enabled);
        });
    }
    disable() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cached.length) {
                this.cached = this.values;
            }
            this.resetTimeout();
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.disabled);
        });
    }
    registerEventListeners() {
        this.client.on(constants_1.CLIENT_EVENTS.beat, () => this.checkSubscriptions());
        this.client.relayer.on(constants_1.RELAYER_EVENTS.connect, () => this.reset());
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.payload, (payloadEvent) => {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.payload;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: payloadEvent });
        });
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.created, (createdEvent) => {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.created;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: createdEvent });
            this.persist();
        });
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.updated, (updatedEvent) => {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.updated;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: updatedEvent });
            this.persist();
        });
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.deleted, (deletedEvent) => {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.deleted;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: deletedEvent });
            this.persist();
        });
    }
}
exports.Subscription = Subscription;
//# sourceMappingURL=subscription.js.map