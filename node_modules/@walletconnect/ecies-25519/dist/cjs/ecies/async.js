"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.decryptWithSharedKey = exports.encrypt = exports.encryptWithSharedKey = void 0;
const crypto_1 = require("@walletconnect/crypto");
const encoding_1 = require("@walletconnect/encoding");
const shared_1 = require("./shared");
function getEciesKeys(sharedKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const hash = yield crypto_1.sha512(sharedKey);
        return { encryptionKey: shared_1.getEncryptionKey(hash), macKey: shared_1.getMacKey(hash) };
    });
}
function encryptWithSharedKey(msg, sharedKey, publicKey, iv = crypto_1.randomBytes(crypto_1.IV_LENGTH)) {
    return __awaiter(this, void 0, void 0, function* () {
        const { encryptionKey, macKey } = yield getEciesKeys(sharedKey);
        const ciphertext = yield crypto_1.aesCbcEncrypt(iv, encryptionKey, msg);
        const dataToMac = encoding_1.concatArrays(iv, publicKey, ciphertext);
        const mac = yield crypto_1.hmacSha256Sign(macKey, dataToMac);
        return shared_1.serialize({ iv, publicKey, ciphertext, mac });
    });
}
exports.encryptWithSharedKey = encryptWithSharedKey;
function encrypt(msg, receiverPublicKey, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publicKey, privateKey } = shared_1.getSenderKeyPair(opts);
        const sharedKey = shared_1.getSharedKey(privateKey, receiverPublicKey);
        return encryptWithSharedKey(msg, sharedKey, publicKey, opts === null || opts === void 0 ? void 0 : opts.iv);
    });
}
exports.encrypt = encrypt;
function decryptWithSharedKey(encrypted, sharedKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const { iv, publicKey, mac, ciphertext } = shared_1.deserialize(encrypted);
        const { encryptionKey, macKey } = yield getEciesKeys(sharedKey);
        const dataToMac = encoding_1.concatArrays(iv, publicKey, ciphertext);
        const macTest = yield crypto_1.hmacSha256Verify(macKey, dataToMac, mac);
        crypto_1.assert(macTest, crypto_1.ERROR_BAD_MAC);
        const msg = yield crypto_1.aesCbcDecrypt(iv, encryptionKey, ciphertext);
        return msg;
    });
}
exports.decryptWithSharedKey = decryptWithSharedKey;
function decrypt(encrypted, privateKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const { publicKey } = shared_1.deserialize(encrypted);
        const sharedKey = shared_1.getSharedKey(privateKey, publicKey);
        return decryptWithSharedKey(encrypted, sharedKey);
    });
}
exports.decrypt = decrypt;
//# sourceMappingURL=async.js.map