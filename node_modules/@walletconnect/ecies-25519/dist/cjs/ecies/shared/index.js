"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserialize = exports.serialize = exports.getMacKey = exports.getEncryptionKey = exports.getSharedKey = exports.getSenderKeyPair = exports.generateKeyPair = exports.generatePnrgFromEntropy = exports.derive = void 0;
const x25519 = __importStar(require("@stablelib/x25519"));
const encoding_1 = require("@walletconnect/encoding");
const crypto_1 = require("@walletconnect/crypto");
function derive(privateKey, publicKey) {
    return x25519.sharedKey(privateKey, publicKey);
}
exports.derive = derive;
function generatePnrgFromEntropy(entropy) {
    return {
        isAvailable: true,
        randomBytes: () => entropy,
    };
}
exports.generatePnrgFromEntropy = generatePnrgFromEntropy;
function generateKeyPair(entropy) {
    const prng = typeof entropy !== "undefined"
        ? generatePnrgFromEntropy(entropy)
        : undefined;
    const keyPair = x25519.generateKeyPair(prng);
    return {
        publicKey: keyPair.publicKey,
        privateKey: keyPair.secretKey,
    };
}
exports.generateKeyPair = generateKeyPair;
function getSenderKeyPair(opts) {
    const keyPair = (opts === null || opts === void 0 ? void 0 : opts.sender) || generateKeyPair();
    return {
        privateKey: keyPair.privateKey,
        publicKey: keyPair.publicKey,
    };
}
exports.getSenderKeyPair = getSenderKeyPair;
function getSharedKey(privateKey, publicKey) {
    return derive(privateKey, publicKey);
}
exports.getSharedKey = getSharedKey;
function getEncryptionKey(hash) {
    return new Uint8Array(hash.slice(crypto_1.LENGTH_0, crypto_1.KEY_LENGTH));
}
exports.getEncryptionKey = getEncryptionKey;
function getMacKey(hash) {
    return new Uint8Array(hash.slice(crypto_1.KEY_LENGTH));
}
exports.getMacKey = getMacKey;
function serialize(opts) {
    return encoding_1.concatArrays(opts.iv, opts.publicKey, opts.mac, opts.ciphertext);
}
exports.serialize = serialize;
function deserialize(arr) {
    const slice0 = crypto_1.LENGTH_0;
    const slice1 = slice0 + crypto_1.IV_LENGTH;
    const slice2 = slice1 + crypto_1.KEY_LENGTH;
    const slice3 = slice2 + crypto_1.MAC_LENGTH;
    const slice4 = arr.length;
    return {
        iv: arr.slice(slice0, slice1),
        publicKey: arr.slice(slice1, slice2),
        mac: arr.slice(slice2, slice3),
        ciphertext: arr.slice(slice3, slice4),
    };
}
exports.deserialize = deserialize;
//# sourceMappingURL=index.js.map