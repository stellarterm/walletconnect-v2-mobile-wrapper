import { JsonRpcRequest, JsonRpcResponse } from "@walletconnect/jsonrpc-types";
import { ISequence, SequenceTypes } from "./sequence";
import { SignalTypes, BlockchainTypes, AppMetadata, NotificationPermissions } from "./misc";
import { CryptoTypes } from "./crypto";
import { IEngine } from "./engine";
export declare namespace SessionTypes {
    type Status = SequenceTypes.Status;
    type JsonRpc = SequenceTypes.JsonRpc;
    type Events = SequenceTypes.Events;
    type Config = SequenceTypes.Config<Events, JsonRpc, Status>;
    type Relay = SequenceTypes.Relay;
    interface BasePermissions extends SequenceTypes.BasePermissions {
        blockchain: BlockchainTypes.Permissions;
    }
    interface ProposedPermissions extends SequenceTypes.ProposedPermissions {
        blockchain: BlockchainTypes.Permissions;
        notifications: NotificationPermissions;
    }
    interface SettledPermissions extends SequenceTypes.SettledPermissions {
        controller: CryptoTypes.Participant;
    }
    type Permissions = SettledPermissions;
    interface ProposeParams extends SequenceTypes.ProposeParams {
        signal: Signal;
        metadata: AppMetadata;
        permissions: ProposedPermissions;
        ttl?: number;
    }
    type CreateParams = ProposeParams;
    type Signal = SignalTypes.Pairing;
    interface Participant extends SequenceTypes.Participant {
        metadata: AppMetadata;
    }
    interface ProposedPeer extends Participant {
        controller: boolean;
    }
    type Proposal = SequenceTypes.Proposal<Signal, ProposedPeer, ProposedPermissions>;
    type ProposedStatus = SequenceTypes.ProposedStatus;
    type RespondedStatus = SequenceTypes.RespondedStatus;
    type PendingStatus = SequenceTypes.PendingStatus;
    type BasePending = SequenceTypes.BasePending<Participant, Proposal>;
    type ProposedPending = SequenceTypes.ProposedPending<Participant, Proposal>;
    type RespondedPending = SequenceTypes.RespondedPending<Participant, Proposal, State>;
    type Pending = SequenceTypes.Pending<Participant, Proposal, State>;
    interface RespondParams extends SequenceTypes.RespondParams<Proposal> {
        response: Response;
    }
    type SettleParams = SequenceTypes.SettleParams<State, Participant, Permissions>;
    interface UpgradeParams extends Upgrade {
        topic: string;
    }
    interface UpdateParams extends Update {
        topic: string;
    }
    interface RequestParams extends SequenceTypes.RequestParams {
        chainId?: string;
    }
    type Upgrade = SequenceTypes.Upgrade<Permissions>;
    type Update = SequenceTypes.Update<State>;
    interface Request extends SequenceTypes.Request {
        chainId?: string;
    }
    interface PayloadEvent extends SequenceTypes.PayloadEvent {
        chainId?: string;
    }
    interface RequestEvent extends Omit<PayloadEvent, "payload"> {
        request: JsonRpcRequest;
    }
    interface ResponseEvent extends Omit<PayloadEvent, "payload"> {
        response: JsonRpcResponse;
    }
    type DeleteParams = SequenceTypes.DeleteParams;
    type Settled = SequenceTypes.Settled<State, Participant, Permissions>;
    type Created = Settled;
    type Success = SequenceTypes.Success<State, Participant>;
    type Failed = SequenceTypes.Failed;
    type Outcome = Failed | Success;
    type State = BlockchainTypes.State;
    interface Response {
        state: State;
        metadata: AppMetadata;
    }
    type DefaultSignalParams = SequenceTypes.DefaultSignalParams<ProposedPeer>;
    type Notification = SequenceTypes.Notification;
    type NotificationEvent = SequenceTypes.NotificationEvent;
    type NotifyParams = SequenceTypes.NotifyParams;
    type Engine = IEngine<Pending, Settled, Upgrade, Update, CreateParams, RespondParams, RequestParams, UpgradeParams, UpdateParams, DeleteParams, ProposeParams, SettleParams, NotifyParams, Participant, Permissions>;
}
export declare abstract class ISession extends ISequence<SessionTypes.Engine, SessionTypes.Config, SessionTypes.Pending, SessionTypes.Settled, SessionTypes.Upgrade, SessionTypes.Update, SessionTypes.State, SessionTypes.Permissions, SessionTypes.CreateParams, SessionTypes.RespondParams, SessionTypes.RequestParams, SessionTypes.UpgradeParams, SessionTypes.UpdateParams, SessionTypes.DeleteParams, SessionTypes.ProposeParams, SessionTypes.SettleParams, SessionTypes.NotifyParams, SessionTypes.Participant, SessionTypes.Signal, SessionTypes.DefaultSignalParams, SessionTypes.ProposedPermissions> {
}
//# sourceMappingURL=session.d.ts.map