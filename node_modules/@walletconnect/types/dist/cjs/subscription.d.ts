import { JsonRpcPayload, IEvents } from "@walletconnect/jsonrpc-types";
import { Logger } from "pino";
import { IClient } from "./client";
import { Reason } from "./misc";
import { RelayerTypes } from "./relayer";
export interface SubscriptionOptions extends RelayerTypes.SubscribeOptions {
    expiry?: number;
}
export interface SubscriptionParams<Data> extends SubscriptionOptions {
    id: string;
    topic: string;
    data: Data;
    expiry: number;
}
export declare namespace SubscriptionEvent {
    interface Payload {
        topic: string;
        payload: JsonRpcPayload;
    }
    interface Created<T> {
        topic: string;
        data: T;
    }
    interface Updated<T> {
        topic: string;
        data: T;
        update: Partial<T>;
    }
    interface Deleted<T> {
        topic: string;
        data: T;
        reason: Reason;
    }
}
export declare type SubscriptionEntries<T> = Record<string, SubscriptionParams<T>>;
export declare abstract class ISubscription<Data> extends IEvents {
    client: IClient;
    logger: Logger;
    context: string;
    abstract subscriptions: Map<string, SubscriptionParams<Data>>;
    abstract readonly length: number;
    abstract readonly topics: string[];
    abstract readonly values: SubscriptionParams<Data>[];
    constructor(client: IClient, logger: Logger, context: string);
    abstract init(): Promise<void>;
    abstract set(topic: string, data: Data, opts: SubscriptionOptions): Promise<void>;
    abstract get(topic: string): Promise<Data>;
    abstract update(topic: string, update: Partial<Data>): Promise<void>;
    abstract delete(topic: string, reason: Reason): Promise<void>;
    protected abstract onPayload(payloadEvent: SubscriptionEvent.Payload): Promise<any>;
}
//# sourceMappingURL=subscription.d.ts.map