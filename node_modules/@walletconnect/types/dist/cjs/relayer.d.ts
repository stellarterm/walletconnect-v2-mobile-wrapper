import { Logger } from "pino";
import { IJsonRpcProvider, JsonRpcPayload, IEvents } from "@walletconnect/jsonrpc-types";
import { IClient } from "./client";
export declare namespace RelayerTypes {
    interface ProtocolOptions {
        protocol: string;
        params?: any;
    }
    interface PublishOptions {
        relay: ProtocolOptions;
        ttl?: number;
    }
    interface SubscribeOptions {
        relay: ProtocolOptions;
    }
}
export declare abstract class IRelayer extends IEvents {
    client: IClient;
    logger: Logger;
    abstract provider: IJsonRpcProvider;
    abstract context: string;
    abstract readonly connected: boolean;
    constructor(client: IClient, logger: Logger, provider?: string | IJsonRpcProvider);
    abstract init(): Promise<void>;
    abstract publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    abstract subscribe(topic: string, listener: (payload: JsonRpcPayload) => void, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    abstract unsubscribe(topic: string, id: string, opts?: RelayerTypes.SubscribeOptions): Promise<void>;
}
//# sourceMappingURL=relayer.d.ts.map