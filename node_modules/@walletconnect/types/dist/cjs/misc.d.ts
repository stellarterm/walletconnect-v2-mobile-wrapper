import { ErrorResponse, JsonRpcRequest } from "@walletconnect/jsonrpc-types";
import { RelayerTypes } from "./relayer";
export declare namespace SignalTypes {
    type Method = MethodPairing | MethodUri;
    type Params = ParamsPairing | ParamsUri;
    interface Base {
        method: Method;
        params: Params;
    }
    type MethodPairing = "pairing";
    interface ParamsPairing {
        topic: string;
    }
    interface Pairing extends Base {
        method: MethodPairing;
        params: ParamsPairing;
    }
    type MethodUri = "uri";
    interface ParamsUri {
        uri: string;
    }
    interface Uri extends Base {
        method: MethodUri;
        params: ParamsUri;
    }
}
export interface JsonRpcPermissions {
    methods: string[];
}
export interface NotificationPermissions {
    types: string[];
}
export declare namespace BlockchainTypes {
    interface Permissions {
        chains: string[];
    }
    interface State {
        accounts: string[];
    }
}
export interface UriParameters {
    protocol: string;
    version: number;
    topic: string;
    publicKey: string;
    relay: RelayerTypes.ProtocolOptions;
    controller: boolean;
}
export interface AppMetadata {
    name: string;
    description: string;
    url: string;
    icons: string[];
}
export interface RelayClientMetadata {
    protocol: string;
    version: number;
    env: string;
    host?: string;
}
export declare namespace Validation {
    interface Valid {
        valid: true;
    }
    interface Invalid {
        valid: false;
        error: ErrorResponse;
    }
    type Result = Valid | Invalid;
}
export declare type Reason = ErrorResponse;
export interface RequestEvent {
    topic: string;
    request: JsonRpcRequest;
    chainId?: string;
}
//# sourceMappingURL=misc.d.ts.map