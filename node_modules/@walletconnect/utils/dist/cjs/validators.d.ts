import { ErrorResponse } from "@walletconnect/jsonrpc-types";
import { AppMetadata, BlockchainTypes, JsonRpcPermissions, NotificationPermissions, SequenceTypes, PairingTypes, SessionTypes, SubscriptionEvent, Validation, SignalTypes } from "@walletconnect/types";
export declare function isSignalTypePairing(signal: SignalTypes.Base): signal is SignalTypes.Pairing;
export declare function isSignalTypeUri(signal: SignalTypes.Base): signal is SignalTypes.Uri;
export declare function isSequenceRespondedStatus(status: SequenceTypes.PendingStatus): status is SequenceTypes.RespondedStatus;
export declare function isSequenceResponded(pending: SequenceTypes.Pending): pending is SequenceTypes.RespondedPending;
export declare function isSequenceFailed(outcome: SequenceTypes.Outcome): outcome is SequenceTypes.Failed;
export declare function isPairingRespondedStatus(status: PairingTypes.PendingStatus): status is PairingTypes.RespondedStatus;
export declare function isPairingResponded(pending: PairingTypes.Pending): pending is PairingTypes.RespondedPending;
export declare function isPairingFailed(outcome: PairingTypes.Outcome): outcome is PairingTypes.Failed;
export declare function isSessionRespondedStatus(status: SessionTypes.PendingStatus): status is SessionTypes.RespondedStatus;
export declare function isSessionResponded(pending: SessionTypes.Pending): pending is SessionTypes.RespondedPending;
export declare function isSessionFailed(outcome: SessionTypes.Outcome): outcome is SessionTypes.Failed;
export declare function isSubscriptionUpdatedEvent<T = any>(event: SubscriptionEvent.Created<T> | SubscriptionEvent.Updated<T>): event is SubscriptionEvent.Updated<T>;
export declare function validateSessionProposeParamsPermissions(permissions: SessionTypes.ProposedPermissions): Validation.Result;
export declare function validateSessionProposeParamsMetadata(metadata: AppMetadata): Validation.Result;
export declare function validateSessionProposeParams(params: SessionTypes.ProposeParams): Validation.Result;
export declare function validateSessionRespondParams(params: SessionTypes.RespondParams): Validation.Result;
export declare function validateBlockchainPermissions(blockchain?: BlockchainTypes.Permissions): Validation.Result;
export declare function validateJsonRpcPermissions(jsonrpc?: JsonRpcPermissions): Validation.Result;
export declare function validateNotificationPermissions(notifications: NotificationPermissions): Validation.Result;
export declare function validateBlockchainState(state?: BlockchainTypes.State, blockchain?: BlockchainTypes.Permissions): Validation.Result;
export declare function isValidArray(arr: any, itemCondition?: (item: any) => boolean): boolean;
export declare function isValidString(value: any): boolean;
export declare function isValidChainId(value: any): boolean;
export declare function isValidAccountId(value: any): boolean;
export declare function isValidUrl(value: any): boolean;
export declare function isValidationInvalid(validation: Validation.Result): validation is Validation.Invalid;
export declare function formatValidResult(): Validation.Valid;
export declare function formatInvalidResult(error: ErrorResponse): Validation.Invalid;
//# sourceMappingURL=validators.d.ts.map