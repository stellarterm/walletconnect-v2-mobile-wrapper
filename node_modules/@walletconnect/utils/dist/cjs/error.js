"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERROR = exports.ERROR_TYPE = void 0;
const misc_1 = require("./misc");
exports.ERROR_TYPE = misc_1.enumify({
    GENERIC: "GENERIC",
    MISSING_OR_INVALID: "MISSING_OR_INVALID",
    MISSING_RESPONSE: "MISSING_RESPONSE",
    MISSING_DECRYPT_PARAMS: "MISSING_DECRYPT_PARAMS",
    INVALID_UPDATE_REQUEST: "INVALID_UPDATE_REQUEST",
    INVALID_UPGRADE_REQUEST: "INVALID_UPGRADE_REQUEST",
    RECORD_ALREADY_EXISTS: "RECORD_ALREADY_EXISTS",
    RESTORE_WILL_OVERRIDE: "RESTORE_WILL_OVERRIDE",
    NO_MATCHING_ID: "NO_MATCHING_ID",
    NO_MATCHING_TOPIC: "NO_MATCHING_TOPIC",
    NO_MATCHING_RESPONSE: "NO_MATCHING_RESPONSE",
    NO_MATCHING_KEY: "NO_MATCHING_KEY",
    UNKNOWN_JSONRPC_METHOD: "UNKNOWN_JSONRPC_METHOD",
    MISMATCHED_TOPIC: "MISMATCHED_TOPIC",
    MISMATCHED_ACCOUNTS: "MISMATCHED_ACCOUNTS",
    SETTLED: "SETTLED",
    NOT_APPROVED: "NOT_APPROVED",
    PROPOSAL_RESPONDED: "PROPOSAL_RESPONDED",
    RESPONSE_ACKNOWLEDGED: "RESPONSE_ACKNOWLEDGED",
    EXPIRED: "EXPIRED",
    SETTLE_TIMEOUT: "SETTLE_TIMEOUT",
    JSONRPC_REQUEST_TIMEOUT: "JSONRPC_REQUEST_TIMEOUT",
    UNAUTHORIZED_TARGET_CHAIN: "UNAUTHORIZED_TARGET_CHAIN",
    UNAUTHORIZED_JSON_RPC_METHOD: "UNAUTHORIZED_JSON_RPC_METHOD",
    UNAUTHORIZED_NOTIFICATION_TYPE: "UNAUTHORIZED_NOTIFICATION_TYPE",
    UNAUTHORIZED_UPDATE_REQUEST: "UNAUTHORIZED_UPDATE_REQUEST",
    UNAUTHORIZED_UPGRADE_REQUEST: "UNAUTHORIZED_UPGRADE_REQUEST",
    UNAUTHORIZED_MATCHING_CONTROLLER: "UNAUTHORIZED_MATCHING_CONTROLLER",
    JSONRPC_REQUEST_METHOD_REJECTED: "JSONRPC_REQUEST_METHOD_REJECTED",
    JSONRPC_REQUEST_METHOD_UNAUTHORIZED: "JSONRPC_REQUEST_METHOD_UNAUTHORIZED",
    JSONRPC_REQUEST_METHOD_UNSUPPORTED: "JSONRPC_REQUEST_METHOD_UNSUPPORTED",
    DISCONNECTED_ALL_CHAINS: "DISCONNECTED_ALL_CHAINS",
    DISCONNECTED_TARGET_CHAIN: "DISCONNECTED_TARGET_CHAIN",
    DISAPPROVED_CHAINS: "DISAPPROVED_CHAINS",
    DISAPPROVED_JSONRPC: "DISAPPROVED_JSONRPC",
    DISAPPROVED_NOTIFICATION: "DISAPPROVED_NOTIFICATION",
    UNSUPPORTED_CHAINS: "UNSUPPORTED_CHAINS",
    UNSUPPORTED_JSONRPC: "UNSUPPORTED_JSONRPC",
    UNSUPPORTED_NOTIFICATION: "UNSUPPORTED_NOTIFICATION",
    UNSUPPORTED_SIGNAL: "UNSUPPORTED_SIGNAL",
    USER_DISCONNECTED: "USER_DISCONNECTED",
    UNKNOWN: "UNKNOWN",
});
const defaultParams = {
    message: "Something went wrong",
    name: "parameter",
    context: "session",
    blockchain: "Ethereum",
};
exports.ERROR = {
    [exports.ERROR_TYPE.GENERIC]: {
        type: exports.ERROR_TYPE.GENERIC,
        code: 0,
        stringify: (params) => (params === null || params === void 0 ? void 0 : params.message) || defaultParams.message,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.GENERIC].code,
            message: exports.ERROR[exports.ERROR_TYPE.GENERIC].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.MISSING_OR_INVALID]: {
        type: exports.ERROR_TYPE.MISSING_OR_INVALID,
        code: 1000,
        stringify: (params) => `Missing or invalid ${(params === null || params === void 0 ? void 0 : params.name) || defaultParams.name}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.MISSING_OR_INVALID].code,
            message: exports.ERROR[exports.ERROR_TYPE.MISSING_OR_INVALID].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.MISSING_RESPONSE]: {
        type: exports.ERROR_TYPE.MISSING_RESPONSE,
        code: 1001,
        stringify: (params) => `Response is required for approved ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} proposals`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.MISSING_RESPONSE].code,
            message: exports.ERROR[exports.ERROR_TYPE.MISSING_RESPONSE].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.MISSING_DECRYPT_PARAMS]: {
        type: exports.ERROR_TYPE.MISSING_DECRYPT_PARAMS,
        code: 1002,
        stringify: (params) => `Decrypt params required for ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.MISSING_DECRYPT_PARAMS].code,
            message: exports.ERROR[exports.ERROR_TYPE.MISSING_DECRYPT_PARAMS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.INVALID_UPDATE_REQUEST]: {
        type: exports.ERROR_TYPE.INVALID_UPDATE_REQUEST,
        code: 1003,
        stringify: (params) => `Invalid ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} update request`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.INVALID_UPDATE_REQUEST].code,
            message: exports.ERROR[exports.ERROR_TYPE.INVALID_UPDATE_REQUEST].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.INVALID_UPGRADE_REQUEST]: {
        type: exports.ERROR_TYPE.INVALID_UPGRADE_REQUEST,
        code: 1004,
        stringify: (params) => `Invalid ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} upgrade request`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.INVALID_UPGRADE_REQUEST].code,
            message: exports.ERROR[exports.ERROR_TYPE.INVALID_UPGRADE_REQUEST].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.RECORD_ALREADY_EXISTS]: {
        type: exports.ERROR_TYPE.RECORD_ALREADY_EXISTS,
        code: 1100,
        stringify: (params) => `Record already exists for ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} matching id: ${params === null || params === void 0 ? void 0 : params.id}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.RECORD_ALREADY_EXISTS].code,
            message: exports.ERROR[exports.ERROR_TYPE.RECORD_ALREADY_EXISTS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.RESTORE_WILL_OVERRIDE]: {
        type: exports.ERROR_TYPE.RESTORE_WILL_OVERRIDE,
        code: 1200,
        stringify: (params) => `Restore will override already set ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.RESTORE_WILL_OVERRIDE].code,
            message: exports.ERROR[exports.ERROR_TYPE.RESTORE_WILL_OVERRIDE].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.NO_MATCHING_ID]: {
        type: exports.ERROR_TYPE.NO_MATCHING_ID,
        code: 1300,
        stringify: (params) => `No matching ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} with id: ${params === null || params === void 0 ? void 0 : params.id}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_ID].code,
            message: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_ID].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.NO_MATCHING_TOPIC]: {
        type: exports.ERROR_TYPE.NO_MATCHING_TOPIC,
        code: 1301,
        stringify: (params) => `No matching ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} with topic: ${params === null || params === void 0 ? void 0 : params.topic}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_TOPIC].code,
            message: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_TOPIC].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.NO_MATCHING_RESPONSE]: {
        type: exports.ERROR_TYPE.NO_MATCHING_RESPONSE,
        code: 1302,
        stringify: (params) => `No response found in pending ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} proposal`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_RESPONSE].code,
            message: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_RESPONSE].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.NO_MATCHING_KEY]: {
        type: exports.ERROR_TYPE.NO_MATCHING_KEY,
        code: 1303,
        stringify: (params) => `No matching key with tag: ${params === null || params === void 0 ? void 0 : params.tag}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_KEY].code,
            message: exports.ERROR[exports.ERROR_TYPE.NO_MATCHING_KEY].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNKNOWN_JSONRPC_METHOD]: {
        type: exports.ERROR_TYPE.UNKNOWN_JSONRPC_METHOD,
        code: 1400,
        stringify: (params) => `Unknown JSON-RPC Method Requested: ${params === null || params === void 0 ? void 0 : params.method}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNKNOWN_JSONRPC_METHOD].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNKNOWN_JSONRPC_METHOD].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.MISMATCHED_TOPIC]: {
        type: exports.ERROR_TYPE.MISMATCHED_TOPIC,
        code: 1500,
        stringify: (params) => `Mismatched topic for ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} with id: ${params === null || params === void 0 ? void 0 : params.id}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.MISMATCHED_TOPIC].code,
            message: exports.ERROR[exports.ERROR_TYPE.MISMATCHED_TOPIC].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.MISMATCHED_ACCOUNTS]: {
        type: exports.ERROR_TYPE.MISMATCHED_ACCOUNTS,
        code: 1501,
        stringify: (params) => `Invalid accounts with mismatched chains: ${params === null || params === void 0 ? void 0 : params.mismatched.toString()}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.MISMATCHED_ACCOUNTS].code,
            message: exports.ERROR[exports.ERROR_TYPE.MISMATCHED_ACCOUNTS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.SETTLED]: {
        type: exports.ERROR_TYPE.SETTLED,
        code: 1600,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} settled`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.SETTLED].code,
            message: exports.ERROR[exports.ERROR_TYPE.SETTLED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.NOT_APPROVED]: {
        type: exports.ERROR_TYPE.NOT_APPROVED,
        code: 1601,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} not approved`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.NOT_APPROVED].code,
            message: exports.ERROR[exports.ERROR_TYPE.NOT_APPROVED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.PROPOSAL_RESPONDED]: {
        type: exports.ERROR_TYPE.PROPOSAL_RESPONDED,
        code: 1602,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} proposal responded`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.PROPOSAL_RESPONDED].code,
            message: exports.ERROR[exports.ERROR_TYPE.PROPOSAL_RESPONDED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.RESPONSE_ACKNOWLEDGED]: {
        type: exports.ERROR_TYPE.RESPONSE_ACKNOWLEDGED,
        code: 1603,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} response acknowledge`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.RESPONSE_ACKNOWLEDGED].code,
            message: exports.ERROR[exports.ERROR_TYPE.RESPONSE_ACKNOWLEDGED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.EXPIRED]: {
        type: exports.ERROR_TYPE.EXPIRED,
        code: 1603,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} expired`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.EXPIRED].code,
            message: exports.ERROR[exports.ERROR_TYPE.EXPIRED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.SETTLE_TIMEOUT]: {
        type: exports.ERROR_TYPE.SETTLE_TIMEOUT,
        code: 2000,
        stringify: (params) => `${misc_1.capitalize((params === null || params === void 0 ? void 0 : params.context) || defaultParams.context)} failed to settle after ${(params === null || params === void 0 ? void 0 : params.timeout) / 1000} seconds`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.SETTLE_TIMEOUT].code,
            message: exports.ERROR[exports.ERROR_TYPE.SETTLE_TIMEOUT].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.JSONRPC_REQUEST_TIMEOUT]: {
        type: exports.ERROR_TYPE.JSONRPC_REQUEST_TIMEOUT,
        code: 2001,
        stringify: (params) => `JSON-RPC Request timeout after ${(params === null || params === void 0 ? void 0 : params.timeout) / 1000} seconds: ${params === null || params === void 0 ? void 0 : params.method}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_TIMEOUT].code,
            message: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_TIMEOUT].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_TARGET_CHAIN]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_TARGET_CHAIN,
        code: 3000,
        stringify: (params) => `Unauthorized Target ChainId Requested: ${params === null || params === void 0 ? void 0 : params.chainId}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_TARGET_CHAIN].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_TARGET_CHAIN].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_JSON_RPC_METHOD]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_JSON_RPC_METHOD,
        code: 3001,
        stringify: (params) => `Unauthorized JSON-RPC Method Requested: ${params === null || params === void 0 ? void 0 : params.method}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_JSON_RPC_METHOD].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_JSON_RPC_METHOD].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_NOTIFICATION_TYPE]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_NOTIFICATION_TYPE,
        code: 3002,
        stringify: (params) => `Unauthorized Notification Type Requested: ${params === null || params === void 0 ? void 0 : params.type}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_NOTIFICATION_TYPE].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_NOTIFICATION_TYPE].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_UPDATE_REQUEST]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_UPDATE_REQUEST,
        code: 3003,
        stringify: (params) => `Unauthorized ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} update request`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_UPDATE_REQUEST].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_UPDATE_REQUEST].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_UPGRADE_REQUEST]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_UPGRADE_REQUEST,
        code: 3004,
        stringify: (params) => `Unauthorized ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} upgrade request`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_UPGRADE_REQUEST].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_UPGRADE_REQUEST].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNAUTHORIZED_MATCHING_CONTROLLER]: {
        type: exports.ERROR_TYPE.UNAUTHORIZED_MATCHING_CONTROLLER,
        code: 3005,
        stringify: (params) => `Unauthorized: peer is also ${(params === null || params === void 0 ? void 0 : params.controller) ? "" : "not "}controller`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_MATCHING_CONTROLLER].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNAUTHORIZED_MATCHING_CONTROLLER].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_REJECTED]: {
        type: exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_REJECTED,
        code: 4001,
        stringify: (params) => "User rejected the request.",
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_REJECTED].code,
            message: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_REJECTED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNAUTHORIZED]: {
        type: exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNAUTHORIZED,
        code: 4100,
        stringify: (params) => "The requested account and/or method has not been authorized by the user.",
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNAUTHORIZED].code,
            message: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNAUTHORIZED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNSUPPORTED]: {
        type: exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNSUPPORTED,
        code: 4200,
        stringify: (params) => `The requested method is not supported by this ${(params === null || params === void 0 ? void 0 : params.blockhain) ||
            defaultParams.blockchain} provider.`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNSUPPORTED].code,
            message: exports.ERROR[exports.ERROR_TYPE.JSONRPC_REQUEST_METHOD_UNSUPPORTED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.DISCONNECTED_ALL_CHAINS]: {
        type: exports.ERROR_TYPE.DISCONNECTED_ALL_CHAINS,
        code: 4900,
        stringify: (params) => "The provider is disconnected from all chains.",
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.DISCONNECTED_ALL_CHAINS].code,
            message: exports.ERROR[exports.ERROR_TYPE.DISCONNECTED_ALL_CHAINS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.DISCONNECTED_TARGET_CHAIN]: {
        type: exports.ERROR_TYPE.DISCONNECTED_TARGET_CHAIN,
        code: 4901,
        stringify: (params) => "The provider is disconnected from the specified chain.",
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.DISCONNECTED_TARGET_CHAIN].code,
            message: exports.ERROR[exports.ERROR_TYPE.DISCONNECTED_TARGET_CHAIN].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.DISAPPROVED_CHAINS]: {
        type: exports.ERROR_TYPE.DISAPPROVED_CHAINS,
        code: 5000,
        stringify: (params) => `User disapproved requested chains`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_CHAINS].code,
            message: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_CHAINS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.DISAPPROVED_JSONRPC]: {
        type: exports.ERROR_TYPE.DISAPPROVED_JSONRPC,
        code: 5001,
        stringify: (params) => `User disapproved requested json-rpc methods`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_JSONRPC].code,
            message: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_JSONRPC].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.DISAPPROVED_NOTIFICATION]: {
        type: exports.ERROR_TYPE.DISAPPROVED_NOTIFICATION,
        code: 5002,
        stringify: (params) => `User disapproved requested notification types`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_NOTIFICATION].code,
            message: exports.ERROR[exports.ERROR_TYPE.DISAPPROVED_NOTIFICATION].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNSUPPORTED_CHAINS]: {
        type: exports.ERROR_TYPE.UNSUPPORTED_CHAINS,
        code: 5100,
        stringify: (params) => `Requested chains are not supported: ${params === null || params === void 0 ? void 0 : params.chains.toString()}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_CHAINS].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_CHAINS].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNSUPPORTED_JSONRPC]: {
        type: exports.ERROR_TYPE.UNSUPPORTED_JSONRPC,
        code: 5101,
        stringify: (params) => `Requested json-rpc methods are not supported: ${params === null || params === void 0 ? void 0 : params.methods.toString()}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_JSONRPC].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_JSONRPC].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNSUPPORTED_NOTIFICATION]: {
        type: exports.ERROR_TYPE.UNSUPPORTED_NOTIFICATION,
        code: 5102,
        stringify: (params) => `Requested notification types are not supported: ${params === null || params === void 0 ? void 0 : params.types.toString()}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_NOTIFICATION].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_NOTIFICATION].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNSUPPORTED_SIGNAL]: {
        type: exports.ERROR_TYPE.UNSUPPORTED_SIGNAL,
        code: 5103,
        stringify: (params) => `Proposed ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context} signal is unsupported`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_SIGNAL].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNSUPPORTED_SIGNAL].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.USER_DISCONNECTED]: {
        type: exports.ERROR_TYPE.USER_DISCONNECTED,
        code: 5900,
        stringify: (params) => `User disconnected ${(params === null || params === void 0 ? void 0 : params.context) || defaultParams.context}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.USER_DISCONNECTED].code,
            message: exports.ERROR[exports.ERROR_TYPE.USER_DISCONNECTED].stringify(params),
        }),
    },
    [exports.ERROR_TYPE.UNKNOWN]: {
        type: exports.ERROR_TYPE.UNKNOWN,
        code: 9000,
        stringify: (params) => `Unknown error${params ? `: ${params === null || params === void 0 ? void 0 : params.toString()}` : ""}`,
        format: (params) => ({
            code: exports.ERROR[exports.ERROR_TYPE.UNKNOWN].code,
            message: exports.ERROR[exports.ERROR_TYPE.UNKNOWN].stringify(params),
        }),
    },
};
//# sourceMappingURL=error.js.map